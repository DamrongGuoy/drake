# Model after https://github.com/rpoyner-tri/drake/blob/xml-inertia-rewriter-dev/tmp/BUILD.bazel
# and geometry/proximity/BUILD.bazel
load(
    "//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
    "drake_cc_package_library",
)

package(default_visibility = ["//visibility:public"])

drake_cc_package_library(
    name = "tmp",
    visibility = ["//visibility:public"],
    deps = [
        ":vega_cdt",
    ],
)

drake_cc_library(
    name = "vega_cdt",
    srcs = ["vega_cdt.cc"],
    hdrs = ["vega_cdt.h"],
    deps = [
        ":DrakeVega",
    ],
)

drake_cc_library(
    name = "DrakeVega",
    srcs = ["vega_mesh_to_drake_mesh.cc"],
    hdrs = ["vega_mesh_to_drake_mesh.h"],
    deps = [
        ":mesher",
        ":objMesh",
        ":volumetricMesh",
        "//geometry/proximity:triangle_surface_mesh",
        "//geometry/proximity:volume_mesh",
    ],
)

drake_cc_library(
    name = "basicAlgorithms",
    srcs = ["disjointSet.cpp"],
    hdrs = [
        "basicAlgorithms.h",
        "disjointSet.h",
        "range.h",
    ],
)

drake_cc_library(
    name = "private",
    srcs = [],
    hdrs = [
        "macros.h",
        "matrixMultiplyMacros.h",
    ],
)

drake_cc_library(
    name = "include",
    srcs = [],
    hdrs = [
        # TODO(DamrongGuoy): Remove dependency on OpenGL.
        # It wants gl.h, glu.h, and glut.h.
        # The dependent files will need to change.
        # They are boundingBox.cpp, triangle.cpp, and octree.cpp.
        "openGL-headers.h",
        "triple.h",
        "valueIndex.h",
        "vegalong.h",
    ],
)

drake_cc_library(
    name = "minivector",
    srcs = [
        "eig3.cpp",
        "mat3d.cpp",
        "vec2d.cpp",
        "vec3d.cpp",
        "vec3i.cpp",
        "vec4i.cpp",
    ],
    hdrs = [
        "eig3.h",
        "mat3d.h",
        "minivector.h",
        "vec2d.h",
        "vec3d.h",
        "vec3i.h",
        "vec4d.h",
        "vec4i.h",
    ],
)

drake_cc_library(
    name = "mesh",
    srcs = [
        "boundingBox.cpp",
        "geometryQuery.cpp",
        "predicates.cpp",
        "predicates_Shewchuk.c",
        "simpleSphere.cpp",
        "tetKey.cpp",
        "triKey.cpp",
        "triangle.cpp",
        "tribox3.cpp",
        "verticesInfo.cpp",
    ],
    hdrs = [
        "boundingBox.h",
        "edgeKey.h",
        "geometryQuery.h",
        "initPredicates.h",
        "predicates.h",
        "simpleSphere.h",
        "tetKey.h",
        "triangle.h",
        "tribox3.h",
        "triKey.h",
        # triangle.cpp include triangle-closestPoint.cpp directly.
        # There is no triangle-closestPoint.h.
        "triangle-closestPoint.cpp",
        "verticesInfo.h",
    ],
    deps = [
        ":basicAlgorithms",
        ":include",
        ":minivector",
        ":private",
    ],
)

drake_cc_library(
    name = "objMesh",
    srcs = [
        "objMesh.cpp",
        "objMeshOctree.cpp",
        "objMeshOrientable.cpp",
        "octree.cpp",
    ],
    hdrs = [
        "objMesh.h",
        "objMeshOctree.h",
        "objMeshOrientable.h",
        "octree.h",
    ],
    deps = [
        ":basicAlgorithms",
        ":include",
        ":mesh",
        ":minivector",
        ":private",
    ],
)

drake_cc_library(
    name = "performanceCounter",
    srcs = [
    ],
    hdrs = [
        "performanceCounter.h",
    ],
)

drake_cc_library(
    name = "volumetricMesh",
    srcs = [
        "tetMesh.cpp",
        "volumetricMesh.cpp",
        "volumetricMeshENuMaterial.cpp",
        "volumetricMeshMooneyRivlinMaterial.cpp",
        "volumetricMeshOrthotropicMaterial.cpp",
        "volumetricMeshParser.cpp",
    ],
    hdrs = [
        "tetMesh.h",
        "volumetricMesh.h",
        "volumetricMeshENuMaterial.h",
        "volumetricMeshMooneyRivlinMaterial.h",
        "volumetricMeshOrthotropicMaterial.h",
        "volumetricMeshParser.h",
    ],
    deps = [
        ":basicAlgorithms",
        ":mesh",
        ":minivector",
    ],
)

drake_cc_library(
    name = "windingNumber",
    srcs = [
        "windingNumber.cpp",
    ],
    hdrs = [
        "windingNumber.h",
    ],
    deps = [
        ":minivector",
        ":objMesh",
        ":private",
    ],
)

drake_cc_library(
    name = "mesher",
    srcs = [
        "delaunayMesher.cpp",
        "tetMesher.cpp",
        "triangleTetIntersection.cpp",
    ],
    hdrs = [
        "delaunayMesher.h",
        "tetMesher.h",
        "triangleTetIntersection.h",
    ],
    deps = [
        ":include",
        ":mesh",
        ":minivector",
        ":objMesh",
        ":performanceCounter",
        ":volumetricMesh",
        ":windingNumber",
    ],
)

drake_cc_googletest(
    name = "tetMesher_test",
    data = [
        "//geometry:test_obj_files",
    ],
    deps = [
        ":DrakeVega",
        ":mesher",
        "//common",
    ],
)

drake_cc_googletest(
    name = "vega_mesh_to_drake_mesh_test",
    deps = [
        ":DrakeVega",
        "//common",
    ],
)

drake_cc_googletest(
    name = "vega_cdt_test",
    deps = [
        ":vega_cdt",
        "//common",
    ],
)
